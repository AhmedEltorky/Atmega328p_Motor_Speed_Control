
Atmega328p_Motor_Speed_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_9>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRB = 0x00;		  // set port B as input port
  80:	14 b8       	out	0x04, r1	; 4
	DDRC |= (1 << PINC0); // set pin 0 in port C as input
  82:	38 9a       	sbi	0x07, 0	; 7

	// Timer0 initialization as fast PWM mode
	TCCR0A |= (1 << WGM00) | (1 << WGM01); // set Timer0 to fast PWM mode
  84:	84 b5       	in	r24, 0x24	; 36
  86:	83 60       	ori	r24, 0x03	; 3
  88:	84 bd       	out	0x24, r24	; 36
	DDRD |= (1 << PIND6);				   // set the OC0A pin in port D to output
  8a:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1 << COM0A1);			   // set OC0A to non-inverting mode
  8c:	84 b5       	in	r24, 0x24	; 36
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1 << TOIE0);				   // set Timer0 overflow interrupt
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	OCR0A = 0;							   // represent the duty cycle
  9c:	17 bc       	out	0x27, r1	; 39
	TCCR0B |= (1 << CS01);				   // set prescaler to 8
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	85 bd       	out	0x25, r24	; 37

	// Timer2 initialization as phase Correct PWM
	TCCR2A |= (1 << WGM20) | (1 << WGM22); // set Timer2 to phase correct PWM mode
  a4:	e0 eb       	ldi	r30, 0xB0	; 176
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	89 60       	ori	r24, 0x09	; 9
  ac:	80 83       	st	Z, r24
	DDRB |= (1 << PINB3);				   // set the OC2A pin in port B to output
  ae:	23 9a       	sbi	0x04, 3	; 4
	TCCR2A |= (1 << COM2A1);			   // set OC2A to non-inverting mode
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);				   // set Timer2 overflow interrupt
  b6:	e0 e7       	ldi	r30, 0x70	; 112
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	OCR2A = 0;							   // represent the duty cycle
  c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2B |= (1 << CS21);				   // set prescaler to 8
  c4:	e1 eb       	ldi	r30, 0xB1	; 177
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24

	sei(); // set global interrupt
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x50>

000000d2 <__vector_16>:
	{
	}
}

ISR(TIMER0_OVF_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	OCR0A = (PINB & 0xF7) | ((PINC & 0x01) << 3);
  e4:	23 b1       	in	r18, 0x03	; 3
  e6:	36 b1       	in	r19, 0x06	; 6
  e8:	83 2f       	mov	r24, r19
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	92 2f       	mov	r25, r18
  fc:	97 7f       	andi	r25, 0xF7	; 247
  fe:	89 2b       	or	r24, r25
 100:	87 bd       	out	0x27, r24	; 39
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	OCR2A = (PINB & 0xF7) | ((PINC & 0x01) << 3);
 126:	23 b1       	in	r18, 0x03	; 3
 128:	36 b1       	in	r19, 0x06	; 6
 12a:	83 2f       	mov	r24, r19
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	92 2f       	mov	r25, r18
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	89 2b       	or	r24, r25
 142:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
